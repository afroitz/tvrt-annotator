import { app, BrowserWindow, ipcMain } from 'electron';
import * as fs from 'node:fs/promises';
import { createReadStream } from 'fs';
import * as path from 'path';
import csv from 'csv-parser';
import { DatasetInfo, AnnotationSample, AnnotationInfo, AnnotationData, Annotation, AnnotationMeta } from './types/types';
import { getMessageReplyThread, processMessageData } from './utils/utils';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Create data and annotations directory if it does not exist
app.on('ready', async () => {
  const dataDir = path.join(app.getPath('userData'), 'annotation-input-data');
  const annotationsDir = path.join(app.getPath('userData'), 'annotations');

  try {
    await fs.access(dataDir);
  } catch (error) {
    await fs.mkdir(dataDir);
  }

  try {
    await fs.access(annotationsDir);
  } catch (error) {
    await fs.mkdir(annotationsDir);
  }
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

/** Load a sample from an annotation dataset by dataset name and index */
ipcMain.handle('loadSample', async (_event, datasetName: string, index: number):Promise<AnnotationSample> => {
  const csvFilePath = path.join(app.getPath('userData'), 'annotation-input-data', datasetName, 'filtered.csv');
  const fullFilePath = path.join(app.getPath('userData'), 'annotation-input-data', datasetName, 'full.csv');

  // Check if file exists
  try {
    await fs.access(csvFilePath);
  } catch (error) {
    throw new Error(`Data file for ${datasetName} does not exist in the user data directory.`);
  }

  // Check if full file exists
  try {
    await fs.access(fullFilePath);
  } catch (error) {
    throw new Error(`Additional data file for ${datasetName} does not exist in the user data directory.`);
  }

  // Read file
  const rows: object[] = await new Promise((resolve, reject) => {
    const results: object[] = [];

    createReadStream(csvFilePath)
      .pipe(csv())
      .on('data', (row) => results.push(row))
      .on('end', () => resolve(results))
      .on('error', (err) => reject(err));
  });

  // Read additional data
  const additionalData: object[] = await new Promise((resolve, reject) => {
    const results: object[] = [];

    createReadStream(fullFilePath)
      .pipe(csv())
      .on('data', (row) => results.push(row))
      .on('end', () => resolve(results))
      .on('error', (err) => reject(err));
  });

  // Check if row index is valid
  if (index < 0 || index >= rows.length) {
    throw new Error(`Invalid index ${index} for dataset ${datasetName}.`);
  }

  const sample: any = rows[index];

  // process message
  const sampleMessage = processMessageData(sample);

  let thread = [];

  if(sampleMessage.is_reply){
    thread = getMessageReplyThread(sampleMessage, additionalData);
  }

  const processedThread = thread.map((msg) => processMessageData(msg));

  return {
    sample: sampleMessage,
    thread: processedThread
  } as AnnotationSample;
});

/** Get basic info about an annotation dataset. Currently this is only the number of rows */
ipcMain.handle('getDatasetInfo', async (_event, name: string): Promise<DatasetInfo> => {
  const datasetDirPath = path.join(app.getPath('userData'), 'annotation-input-data', name);

  // Check if file exists
  try {
    await fs.access(datasetDirPath);
  } catch (error) {
    throw new Error(`Dataset ${name} does not exist in the user data directory.`);
  }

  // Check if filtered file exists
  const dataFilePath = path.join(datasetDirPath, 'filtered.csv');
  try {
    await fs.access(dataFilePath);
  } catch (error) {
    throw new Error(`Data file for dataset ${name} does not exist in the user data directory.`);
  }

  // Read file
  const rows: object[] = await new Promise((resolve, reject) => {
    const results: object[] = [];

    createReadStream(dataFilePath)
      .pipe(csv())
      .on('data', (row) => results.push(row))
      .on('end', () => resolve(results))
      .on('error', (err) => reject(err));
  });

  // Get task info
  const taskInfoPath = path.join(datasetDirPath, 'task.json');

  try {
    await fs.access(taskInfoPath);
  } catch (error) {
    throw new Error(`Task info file for dataset ${name} does not exist in the user data directory.`);
  }

  const taskInfo = await fs.readFile(taskInfoPath, 'utf-8');
  const taskInfoObject = JSON.parse(taskInfo);

  return {
    rows: rows.length,
    taskInfo: taskInfoObject
  };
});

/** Load the names of all available datasets */
ipcMain.handle('getDatasetNames', async () => {
  const dataDir = path.join(app.getPath('userData'), 'annotation-input-data');

  try {
    await fs.access(dataDir);
  } catch (error) {
    throw new Error('Data directory does not exist.');
  }

  const files = await fs.readdir(dataDir);

  // filter out everything that is not a directory
  const stats = await Promise.all(files.map(async (file) => {
    const filePath = path.join(dataDir, file);
    return await fs.stat(filePath);
  }));

  const filteredFiles = files.filter((file, index) => stats[index].isDirectory());

  return filteredFiles;
});

/** Start an annotation for a dataset if none exists yet, else return data about the existing one */
ipcMain.handle('startOrContinueAnnotation', async (_event, datasetName: string): Promise<AnnotationInfo> => {
  const annotationDir = path.join(app.getPath('userData'), 'annotations', datasetName);

  try {
    await fs.access(annotationDir);
    console.log(`Annotation directory for ${datasetName} exists`);
  } catch (error) {
    
    await fs.mkdir(annotationDir);

    // create annotation_meta.json and annotation.json
    const annotationMeta = {
      selectedSample: 0
    };

    await fs.writeFile(path.join(annotationDir, 'annotation_meta.json'), JSON.stringify(annotationMeta, null, 2));

    const annotationData: AnnotationData = {
      annotatedSamples: []
    };

    await fs.writeFile(path.join(annotationDir, 'annotation.json'), JSON.stringify(annotationData, null, 2));

    console.log(`Annotation directory and files for ${datasetName} created`);
  }

  // Read annotation_meta.json
  const annotationMeta = await fs.readFile(path.join(annotationDir, 'annotation_meta.json'), 'utf-8');

  // Read annotation.json
  const annotationData = await fs.readFile(path.join(annotationDir, 'annotation.json'), 'utf-8');

  return {
    meta: JSON.parse(annotationMeta),
    data: JSON.parse(annotationData)
  };
});

/** Add or update an annotation */
ipcMain.handle('updateAnnotation', async (_event, datasetName: string, sampleIndex: number, annotation: Annotation): Promise<void> => {
  const annotationDir = path.join(app.getPath('userData'), 'annotations', datasetName);

  // Read annotation.json
  const annotationData = await fs.readFile(path.join(annotationDir, 'annotation.json'), 'utf-8');
  const annotatedSamples = (JSON.parse(annotationData) as AnnotationData).annotatedSamples;

  const existingSampleAnnotation = annotatedSamples.find((sample) => sample.sampleIndex === sampleIndex);

  if (existingSampleAnnotation) {
    // if sample does already have annotations, check if it has an annotation for the rumor. If so, update, else, add
    const existingRumorAnnotation = existingSampleAnnotation.annotations.find((ann) => ann.rumorIndex === annotation.rumorIndex);

    if (existingRumorAnnotation) {
      existingRumorAnnotation.label = annotation.label;
    } else {
      existingSampleAnnotation.annotations.push(annotation);
    }
  } else {
    // if sample does not have annotations yet, add it
    annotatedSamples.push({
      sampleIndex,
      annotations: [annotation]
    });
  }

  await fs.writeFile(path.join(annotationDir, 'annotation.json'), JSON.stringify({ annotatedSamples }, null, 2));
});

/** Update annotation metadata */
ipcMain.handle('updateAnnotationMeta', async (_event, datasetName: string, meta: AnnotationMeta): Promise<void> => {
  const annotationDir = path.join(app.getPath('userData'), 'annotations', datasetName);

  await fs.writeFile(path.join(annotationDir, 'annotation_meta.json'), JSON.stringify(meta, null, 2));
});

